// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/clui/autocomplete (interfaces: Installer,Group,Command)

// Package autocomplete is a generated GoMock package.
package autocomplete

import (
	gomock "github.com/golang/mock/gomock"
	flagset "github.com/spoke-d/clui/flagset"
	radix "github.com/spoke-d/clui/radix"
	reflect "reflect"
)

// MockInstaller is a mock of Installer interface
type MockInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerMockRecorder
}

// MockInstallerMockRecorder is the mock recorder for MockInstaller
type MockInstallerMockRecorder struct {
	mock *MockInstaller
}

// NewMockInstaller creates a new mock instance
func NewMockInstaller(ctrl *gomock.Controller) *MockInstaller {
	mock := &MockInstaller{ctrl: ctrl}
	mock.recorder = &MockInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstaller) EXPECT() *MockInstallerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInstaller) Install(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallerMockRecorder) Install(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstaller)(nil).Install), arg0)
}

// Uninstall mocks base method
func (m *MockInstaller) Uninstall(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall
func (mr *MockInstallerMockRecorder) Uninstall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockInstaller)(nil).Uninstall), arg0)
}

// MockGroup is a mock of Group interface
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// WalkPrefix mocks base method
func (m *MockGroup) WalkPrefix(arg0 string, arg1 radix.WalkFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WalkPrefix", arg0, arg1)
}

// WalkPrefix indicates an expected call of WalkPrefix
func (mr *MockGroupMockRecorder) WalkPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPrefix", reflect.TypeOf((*MockGroup)(nil).WalkPrefix), arg0, arg1)
}

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// FlagSet mocks base method
func (m *MockCommand) FlagSet() *flagset.FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagSet")
	ret0, _ := ret[0].(*flagset.FlagSet)
	return ret0
}

// FlagSet indicates an expected call of FlagSet
func (mr *MockCommandMockRecorder) FlagSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagSet", reflect.TypeOf((*MockCommand)(nil).FlagSet))
}
